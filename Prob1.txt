# Time Complexity: O(mn)
# Space Complexity: O(mn)
# Did this code successfully run on LeetCode: Yes

# Three line Explanation:
# 1. Check where "1" is
# 2. Call BFS when we encounter a "1". Change to "0" before moving onto it's neighbours.
# 3. Keep a count of how many times BFS is called. Return it.

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        self.grid = grid
        self.dirs = [(0,1),(1,0),(0,-1),(-1,0)]
        self.islands = 0
        for i in range(len(self.grid)):
            for j in range(len(self.grid[0])):
                if self.grid[i][j] == "1":
                    self.islands += 1
                    self.BFS(i, j)
        return self.islands
    
    def BFS(self, row, col):
        queue = collections.deque()
        queue.append((row,col))
        self.grid[row][col] = "0"
        while queue:
            cur = queue.popleft()
            for each in self.dirs:
                r = cur[0] + each[0]
                c = cur[1] + each[1]
                if r >= 0 and r < len(self.grid) and c >= 0 and c < len(self.grid[0]) and self.grid[r][c] == "1":
                    self.grid[r][c] = "0"
                    queue.append((r, c))
        return