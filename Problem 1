//Time Complexity : O(m*n)
// Space Complexity :O(m*n)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :No

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        if(grid.size()==0) return 0;
        queue<vector<int>> q;
        int m = grid.size(); int n = grid[0].size();
        int count =0;
        
        
        
        int dirs[4][2] ={{0,1},{0,-1}, {-1,0}, {1,0}};
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j]=='1'){
                    count++;
                    grid[i][j]='0';
                    vector<int> t; t.push_back(i); t.push_back(j);
                    q.push(t);
                    while(q.size()>0){
                        vector<int> arr = q.front(); q.pop();
                        for(int k=0; k<4; k++){
                            int r = dirs[k][0] + arr[0];
                            int c = dirs[k][1] + arr[1];
                            if(r>=0 && r<m && c>=0 && c<n && grid[r][c]=='1'){
                                grid[r][c]='0';
                                 vector<int> temp; temp.push_back(r); temp.push_back(c);                                               q.push(temp);
                            }
                        }
                        
                    }
                    
                }
            }
        }
        
        return count;
    }
};