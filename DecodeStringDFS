// Time Complexity :O(n) n is the length of the string
// Space Complexity : O(n) n is the length of the string
class Solution{

    int i = 0;
    public String decodeString(String s) {
        if(s == null || s.length() == 0) return s;
        int num = 0 ; StringBuilder result = new StringBuilder();

        while(i < s.length()){
            char c = s.charAt(i);

            // case 1
            if(Character.isDigit(c)){
                num = num * 10 + c - '0';
                i++;
            }
            // case 2
            else if(c == '['){
                i++;
                String inner = decodeString(s);
                for(int k = 0 ; k < num ; k++){   // multiply the inner string by the number k times
                    res.append(inner);
                }
                // resetting num
                num = 0;
            }
            else if(c == ']'){
                i++;
                return res.toString();
            }
            // alphabet
            else {
                result.append(c);
                i++;
            }
        }
        return res.toString();
    }
}
