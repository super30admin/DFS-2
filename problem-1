//Time complexity : O(M×N) where M is the number of rows and N is the number of columns.

//Space complexity : worst case O(M×N) in case that the grid map is filled with lands where DFS goes by M×N deep.
class Solution {
    public int numIslands(char[][] grid) {
        if(grid==null || grid.length==0) return 0;
        int n=grid.length;
        int m=grid[0].length;
        int count=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]=='1')
                {
                    count++;
                    dfs(grid,i,j);  
                }
                  
            }
        }
        return count;
    }
    
    void dfs(char[][] grid,int i, int j)
    {
         if(i<0 || i>=grid.length || j<0 || j>=grid[0].length || grid[i][j]=='0')
              return;
         grid[i][j]='0';
         int[][] dirs={{-1,0},{0,-1},{1,0},{0,1}};
                for(int[] dir: dirs)
                {
                    int r=dir[0]+i;
                    int c=dir[1]+j;
                   dfs(grid,r,c);
                }
    }
}
