// Time Complexity : O(n)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

class Solution {
    public String decodeString(String s) {
    
    // edge case
    if (s.length() == 0) return "";
        
    StringBuilder sb = new StringBuilder();
    /* if the character is digit then get the entire number and then from one open bracket to end bracket 
    decompress the string and if it is charcater then just append it directly */
        
    for (int i = 0; i < s.length(); i ++) {
        char c = s.charAt(i); // get character at current index
        if (Character.isDigit(c)) {
            int digit_begin = i;
            while (s.charAt(i) != '[') i++;
            int num = Integer.valueOf(s.substring(digit_begin, i));
            int count = 1;
            int str_begin = i+1;
            i ++;
            // get the substring size then respective closing bracket for open brakcet */
            while (count != 0) {
                if (s.charAt(i) == '[') count ++;
                else if (s.charAt(i) == ']') count --;
                i ++;
            }
            i--;
            // decompress the substring from open to close bracket
            String str = decodeString(s.substring(str_begin, i));
            /* for n number of times decompressed the string */
            for (int j = 0; j < num; j ++) {
                sb.append(str);
            }
        } else { // if its character then just append it
            sb.append(c);
        }
    }
    return sb.toString();
}
}