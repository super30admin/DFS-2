{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;}
{\*\expandedcolortbl;;\cssrgb\c12941\c12941\c12941;}
\margl1440\margr1440\vieww28600\viewh15060\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
class Solution:\
    def numIslands(self, grid: List[List[str]]) -> int:\
        \
        if not grid:\
            return 0\
        island = 0\
        visited = set()\
        \
        def helper(grid, r, c):\
            queue = collections.deque()\
            queue.append((r, c))\
            visited.add((r, c))\
            while queue:\
                \
                direction = [[1,0], [-1, 0], [0,1], [0, -1]]\
                r, c = queue.popleft()\
                for i, j in direction:\
                    nr = r + i\
                    nc = c + j\
                    if (nr >= 0 and nr < len(grid) and nc >= 0 and nc < len(grid[0]) and (nr, nc) not in visited and grid[nr][nc] == "1"):\
                        visited.add((nr, nc))\
                        queue.append((nr,nc))\
        \
        for i in range(len(grid)):\
            for j in range(len(grid[0])):\
                if grid[i][j] == "1" and (i,j) not in visited:\
                    helper(grid, i, j)\
                    island += 1\
        return island}