
// Time Complexity : o(n)
// Space Complexity : o(n)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

// Your code here along with comments explaining your approach
/*
* Create two stacks one to store the string , second to store the number of times it needs to be repeated
* traverse through the string
* if the character is a digit , find all digits until "[" is seen. Add the value to numStack
* if character is "]" then pop from stack until [ is seen
* pop from numstack to get the number of times to repeat
* repeat the string and add it back to the stack
* */

class Solution {
    public String decodeString(String s) {
        Stack<String> stack = new Stack<>();
        Stack<Integer> numStack = new Stack<>();
        int i =0;
        while(i< s.length()){
            char ch = s.charAt(i);
            if(ch==']'){
                String child = getString(stack);
                int times = getTimes(numStack);
                String decoded = getDecoded(child, times);
                stack.add(decoded);
                i++;
            } else if(Character.isDigit(ch)){
                int num = 0;
                while(ch!='['){
                    num = num*10 + ch-'0';
                    i++;
                    ch = s.charAt(i);
                }
                numStack.add(num);
            } else {
                stack.add(ch + "");
                i++;
            }
        }
        StringBuilder res = new StringBuilder();
        while(!stack.isEmpty()){
            res.append(stack.pop());
        }
        res.reverse();
        return res.toString();
    }

    String getString(Stack<String> stack) {
        StringBuilder sb = new StringBuilder();
        while(!stack.peek().equals("[")){
            sb.append(stack.pop());
        }
        stack.pop();
        return sb.toString();

    }

    int getTimes(Stack<Integer> stack) {
        return stack.pop();
    }

    String getDecoded(String child, int times){
        StringBuilder sb = new StringBuilder();
        for(int i =0; i< times; i++){
            sb.append(child);
        }
        return sb.toString();
    }


}