//https://leetcode.com/problems/number-of-islands/
//DFS
//time - O(m*n)
//space - O(m*n)
class Solution {
    int m , n;
    int dirs[][];
    public int numIslands(char[][] grid) {        
        if(grid == null || grid.length ==0) return 0;
        
        m= grid.length;
        n = grid[0].length;
        dirs = new int[][] {{0,1}, {1,0},{-1,0},{0,-1}};
       
        int total =0;
        for(int i = 0;i<m;i++){
            for(int j =0 ;j<n;j++)
            { if(grid[i][j]=='1')
                {   dfs(grid,i,j);
                    total++;
                }
            }
        }
      return total;             
    }
                
private void dfs(char grid[][], int r , int c){
     //base
     if(r<0 || c<0 || r>=m || c>=n || grid[r][c] != '1') return;
     //logic
     grid[r][c] ='0';
    for(int[] dir:dirs){
     int nr = r+dir[0];
     int nc = c+dir[1];
     dfs(grid, nr,nc);
    }
  }
}