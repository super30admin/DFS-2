class Solution {
     int[][] dirs={{1,0},{-1,0},{0,1},{0,-1}};
    
    public int numIslands(char[][] grid) {
        if(grid==null || grid.length==0) return 0;
        int m=grid.length;
        int n=grid[0].length;
        Queue<int []> q=new LinkedList<>();
       int count=0;
        
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++){
                if(grid[i][j]=='1'){
                    count++;
                    q.add(new int[]{i,j});
                    while(!q.isEmpty()){
                        int[] rc=q.poll();
                    for(int [] dir:dirs){
                        int r=rc[0]+dir[0];
                        int c=rc[1]+dir[1];
                        if(r<m && c<n  && r>=0 && c>=0 && grid[r][c]=='1'){
                        q.add(new int[]{r,c});
                        grid[r][c]='0';
                        }
                    }
                    
                }
            }
    }
        return count;
}
}
//TC : O(2mn)
//SC : O(math.min(m,n))