
// Time Complexity : o(mn)
// Space Complexity : o(nm)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

// Your code here along with comments explaining your approach
/*
* DFS the grid starting from an island.
* when the dfs returns,  one island is found.  increment the result
* mark visited nodes so dfs doesnt revisit
* */

class Solution {
    int dir[][] = {{0,1},{0,-1},{1,0},{-1,0}};
    public int numIslands(char[][] grid) {
        int res = 0;
        for(int i =0; i< grid.length; i++){
            for(int j =0; j< grid[0].length; j++){
                if(grid[i][j] == '1'){
                    helper(grid, i, j);
                    res++;
                }
            }
        }
        return res;
    }

    void helper(char[][] grid , int i , int j ){
        if(i< 0 || j< 0 || i>=grid.length || j>=grid[0].length || grid[i][j] == '0'){
            return;
        }
        grid[i][j] = '0';
        for(int d = 0; d< dir.length; d++){
            int x = i+dir[d][0];
            int y = j + dir[d][1];

            helper(grid, x, y);
        }
    }
}