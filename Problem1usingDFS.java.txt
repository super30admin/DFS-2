class Solution {
    //TC: O(m*n)
    //SC: O(m*n)
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0) return 0;
        int m = grid.length;
        int n = grid[0].length;

        int [][] dirs = new int[][]{{0,1}, {0,-1}, {1,0}, {-1,0}};
        int count = 0;
        Queue<int []> q = new LinkedList<>();
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == '1'){
                    count++;
                    //run a dfs whenever we are counter a '1'
                    dfs(grid, i, j, dirs, m,n);
                        
                        }
                    }
                }
            return count;
        }
        

    private void dfs(char[][] grid, int i, int j, int [][] dirs, int m, int n){
          
           if(i < 0 || j < 0 ||i == m || j == n || grid[i][j] == '0') return;

            grid[i][j] = '0';
            for(int [] dir : dirs){
                int nr = dir[0] + i;
                int nc = dir[1] + j;
        
                dfs(grid , nr,nc, dirs, m, n);
                                
            }
        }
    
}