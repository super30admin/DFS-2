//BFS

//TimeComplexity O(m*n)
//SpaceComplexity min(m,n)

class Solution {
    public int numIslands(char[][] grid) {

Queue<int[]> q = new LinkedList<>();
int[][] dirs = new int[][] {{-1,0}, {0,1}, {1,0}, {0,-1}};
int count = 0;
      for(int i = 0 ; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == '1'){
                    count++;
                    q.add(new int[] {i,j});
                    grid[i][j] = '0';

                    while(!q.isEmpty()){
                        int[] curr = q.poll();
                     for(int[] dir : dirs){
                        int nr = curr[0] + dir[0];
                        int nc = curr[1] + dir[1];
                        if(nr >= 0 && nc >= 0 && nr < grid.length && nc < grid[0].length && grid[nr][nc] == '1'){
                            q.add(new int[] {nr,nc});
                            grid[nr][nc] = '0';
                        }
                    }
                    }
                   
                }
            }
      }
      return count;  
    }
}

//DFS

//TimeComplexity O(m*n)
//SpaceComplexity O(m*n)

class Solution {
    int[][] dirs;
    public int numIslands(char[][] grid) {
int m = grid.length;
int n = grid[0].length;
dirs = new int[][] {{-1,0}, {0,1}, {1,0}, {0,-1}};
int count = 0;
      for(int i = 0 ; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == '1'){
                    count++;
                   dfs(grid,i,j,m,n);
                }
            }
      }
      return count;  
    }


    private void dfs(char[][] grid,int i, int j , int m, int n){
        if(i < 0 || j < 0 || i == m || j == n || grid[i][j] == '0'){
            return;
        }

grid[i][j] = '0';
        for(int[] dir : dirs){
            int r = i + dir[0];
            int c = j + dir[1];
            dfs(grid,r,c,m,n);
        }
    }
}
