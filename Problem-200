/*
Time Complexity: O(m*n)

Space Complexity: O(m*n)

LeetCode: successful

Approach:

pick any index
continue moving in all the 4 directions, till you keep getting 1s and put it in the visited array.

since we are only looking for 1 only, we would be covering one island atleast and increment the counter.
now, iterate through grid and call helperDfs for those indexes which are not visited or is not 0.


*/

class Solution {
    
    int [][] visited;
    public int numIslands(char[][] grid) {
        
        
        if(grid==null || grid.length==0) return 0;
        visited= new int [grid.length][grid[0].length];
        
        
        int result=0;
        for(int i=0;i<grid.length;i++)
            for(int j=0;j<grid[0].length;j++)
            {
                if(visited[i][j]==0&&grid[i][j]=='1')
                {
                    helperDfs(grid,i,j);
                    result++;
                }
            }
        
        return result;
    }
    
    private void helperDfs(char [][] grid,int r, int c)
    {
        
        // base case
        if(grid[r][c]=='0')
            return;
        visited[r][c]=1;
        
        
        // progress case
        
        int [][] dirs = new int [][] {{0,1},{1,0},{-1,0},{0,-1}};
        
        
        for(int [] dir : dirs )
        {
            int i=dir[0]+r;
            int j=dir[1]+c;
            int res=1;
            if(i>=0 && i<grid.length &&j>=0 &&j<grid[0].length && visited [i][j]!=1)
            {
               helperDfs(grid,i,j);
            }
        }
        
        return;
        
    }
}
