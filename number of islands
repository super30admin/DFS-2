#time complexity: O(m*n)
#space complexity: O(min of m,n)
#did it run on leetcode: yes
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
       if grid is None or len(grid)==0: return 0
       m = len(grid)
       n= len(grid[0])
       count = 0
       dirs = [[0,1],[0,-1],[1,0],[-1,0]]
       for i in range(m):
           for j in range(n):
               if grid[i][j]=='1':
                   count+=1
                   self.dfs(grid,i,j,dirs,m,n)
       return count 

    def dfs(self, grid:List[List[str]], i:int, j:int, dirs:List[List[int]], m:int, n:int):
        #base
        if i<0 or j<0 or i==m or j==n or grid[i][j] == '0': return
        #logic
        grid[i][j]='0'
        for d in dirs:
            r = d[0]+i
            c = j+d[1]
            self.dfs(grid,r,c,dirs,m,n)
