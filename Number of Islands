//Time Complexity: DFS - O(m*n)
//Space Complexity: DFS: O(m*n) && BFS: O(min(m,n)) ****

//Approach: DFS || BFS--> Any can be used - Idea is to perform BFS or DFS traverse and mark visited as '2' along with keeping count of total islands

  /**** DFS ****/
class Solution {  
    public int numIslands(char[][] grid) {
        if(grid==null || grid.length==0){
            return 0;
        }
        int count = 0;
        for(int i = 0 ; i < grid.length ; i++){
            for(int j = 0 ; j < grid[0].length ; j++){
                if(grid[i][j]=='1'){
                    count++;
                    dfs(grid,i,j);
                }
            }        
        }
        return count;
    }
    
    private void dfs(char[][] grid, int i, int j){
        //base
        if(i<0 || j<0 || i>=grid.length || j>=grid[0].length || grid[i][j]!='1'){
            return;
        }
        grid[i][j] = '2';
        int[][] dirs = {{0,1},{0,-1},{1,0},{-1,0}};
        for(int[] dir : dirs){
            int row = i + dir[0];
            int col = j + dir[1];
            dfs(grid, row,col);
        }
    }
}

      /**** BFS ****/    
class Solution {
    public int numIslands(char[][] grid) {
        if(grid==null || grid.length==0){
            return 0;
        }
        
        Queue<int[]> que = new LinkedList<>();
        int[][] dirs = {{0,1},{0,-1},{-1,0},{1,0}};
        int count = 0;
        for(int i = 0 ; i < grid.length ; i++){
            for(int j = 0 ; j < grid[0].length ; j++){
                if(grid[i][j]=='1'){
                    count++;
                    que.add(new int[]{i,j});
                    grid[i][j] = '2';
                }
                
                while(!que.isEmpty()){
                    int[] current = que.poll();
                    
                    for(int[] dir : dirs){
                        int r = dir[0] + current[0];
                        int c = dir[1] + current[1];
                        
                        if(r>=0 && r < grid.length && c>=0 && c<grid[0].length && grid[r][c]=='1'){
                            grid[r][c] = '2';
                            que.add(new int[]{r,c});
                        }
                    }
                }
            }
        }
        return count;
    }
