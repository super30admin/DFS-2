// Time Complexity :  O(m*n)
// Space Complexity : O(m*n) -> worst case stack space.
// Did this code successfully run on Leetcode : Yes.
// Any problem you faced while coding this : No
// Your code here along with comments explaining your approach : DFS approach.We start iterating through the graph. Whenever we find a one, we increase the count of islands and start iterating through all it's neighbours in 4 directions by using recursion and make them zeros. That way, we get all our islands. This is faster in terms of perfomance because we use recursion stack space instead of an auxillary data structure.

class Solution {
    int m;int n;
    int[][] dirs={{0,1},{1,0},{-1,0},{0,-1}};
    int count;
    public int numIslands(char[][] grid) {
       if(grid==null || grid.length==0) return 0;
        Queue<int []> q=new LinkedList<>();
        m=grid.length;n=grid[0].length;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                {
                    if(grid[i][j]=='1'){
                           count+=1;
                           dfs(grid,i,j);
                    }
                    }
                }
        }
       return count; 
    }
    private void dfs(char[][] grid,int sr,int sc){
        //base
        if(sr<0 || sr>=m || sc<0 || sc>=n || grid[sr][sc]=='0') return;
        //logic
        grid[sr][sc]='0';
        for(int[] dir:dirs){
            int r=dir[0]+sr;
            int c=dir[1]+sc;
            dfs(grid,r,c);
            
        }
    }
}

// Time Complexity : O(m*n+m*n)-> O(m*n)
// Space Complexity : O(min(m,n)) -> you may having a max o fthat element.
// Did this code successfully run on Leetcode : Yes.
// Any problem you faced while coding this : No
// Your code here along with comments explaining your approach : BFS approach.We start iterating through the graph. Whenever we find a one, we increase the count of islands and start iterating through all it's neighbours in 4 directions and make them zeros. That way, we get all our islands.

class Solution {
    public int numIslands(char[][] grid) {
       if(grid==null || grid.length==0) return 0;
        Queue<int []> q=new LinkedList<>();
        int m=grid.length;int n=grid[0].length;
        int[][] dirs={{0,1},{1,0},{-1,0},{0,-1}};
        int count=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]=='1'){
                    q.add(new int[] {i,j});
                    count+=1;
                    while(!q.isEmpty()){
                        int[] curr=q.poll();
                        for(int[] dir:dirs){
                            int r= curr[0]+dir[0];
                            int c= curr[1]+dir[1];
                            if(r>=0 && r<m && c>=0 && c<n && grid[r][c]=='1'){
                                grid[r][c]= '0';
                                q.add(new int[] {r,c});
                            }
                            
                        }
                    }
                }
            }
        }
       return count; 
    }
}