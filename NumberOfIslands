class Solution {
public:
    int dirs[4][4] = {{1,0},{-1,0},{0,1},{0,-1}};
    int n;
    int m;
    
    void dfs(vector<vector<char>>& grid, int r , int c ){
        
        if(r<0 || c<0 || r==n || c== m || grid[r][c] != '1'){
            return;
        }
        
        grid[r][c] ='2';
        for(auto dir : dirs){
            int nr = r + dir[0];
            int nc = c + dir[1];
                dfs(grid, nr, nc);
        }
    }
    
    int numIslands(vector<vector<char>>& grid) {
        int count = 0;
    int n = grid.size();
    int m = grid[0].size();
        for(int i = 0; i< n ; i++){
            for(int j = 0; j< m; j++){
                if(grid[i][j]=='1'){
                    count++;
                    dfs(grid, i , j );
                }
            }
        }
    return count;    
    }
};
